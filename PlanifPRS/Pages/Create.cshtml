@page
@model PlanifPRS.Pages.Prs.CreateModel
@{
    ViewData["Title"] = "Créer une PRS";

    // Vérifier si l'utilisateur est admin ou validateur
    var isAdminOrValidateur = Model.IsAdminOrValidateur;
    var currentUserLogin = Model.CurrentUserLogin;
}

@section Styles {
    <!-- CSS EXTERNE COMPLET -->
    <link rel="stylesheet" href="~/css/create-prs.css" asp-append-version="true" />

    <style>
        /* Styles spécifiques pour la sélection de semaine */
        .week-selector {
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            padding: 0.375rem 0.75rem;
            background-color: #f8f9fa;
        }

            .week-selector .week-navigation {
                display: flex;
                align-items: center;
                justify-content: space-between;
                margin-bottom: 10px;
            }

            .week-selector .week-info {
                font-weight: bold;
                text-align: center;
            }

        .week-view {
            background-color: #e9ecef;
            border-radius: 4px;
            padding: 10px;
            text-align: center;
            margin-bottom: 10px;
        }

        .week-days {
            display: flex;
            justify-content: space-between;
            margin: 10px 0;
        }

        .week-day {
            flex: 1;
            text-align: center;
            padding: 8px 4px;
            font-size: 0.9em;
            border-radius: 4px;
            background-color: #fff;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

            .week-day .day-number {
                font-weight: bold;
                color: #495057;
            }

            .week-day .day-name {
                font-size: 0.85em;
                color: #6c757d;
            }

        .week-selected {
            background-color: #d1ecf1;
            border: 2px solid #17a2b8;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .week-highlight {
            font-weight: bold;
            color: #0c5460;
            font-size: 1.1em;
        }

        .disabled-field {
            background-color: #e9ecef !important;
            opacity: 0.7;
            cursor: not-allowed;
        }

        .creator-badge {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 6px 10px;
            font-size: 0.9rem;
            display: inline-flex;
            align-items: center;
            margin-bottom: 1rem;
        }

            .creator-badge i {
                margin-right: 5px;
                color: #6c757d;
            }
            
        /* Styles pour la zone d'upload */
        .file-upload-container {
            border: 2px dashed #dee2e6;
            border-radius: 6px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
            background-color: #f8f9fa;
            position: relative;
        }

        .file-upload-container:hover, .file-upload-container.dragover {
            border-color: #007bff;
            background-color: #e3f2fd;
        }

        .file-upload-icon {
            font-size: 3rem;
            color: #6c757d;
            margin-bottom: 10px;
        }

        .file-upload-text {
            color: #495057;
        }

        .file-list {
            list-style-type: none;
            padding: 0;
            margin: 15px 0 0 0;
            max-height: 200px;
            overflow-y: auto;
        }

        .file-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: #fff;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .file-icon {
            margin-right: 10px;
            font-size: 1.2rem;
        }

        .file-name {
            flex-grow: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .file-size {
            margin-left: 10px;
            color: #6c757d;
            font-size: 0.85rem;
        }

        .remove-file {
            color: #dc3545;
            cursor: pointer;
            margin-left: 10px;
        }

        .file-upload-input {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }

        .upload-limits {
            font-size: 0.8rem;
            color: #6c757d;
            margin-top: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .upload-limits i {
            margin-right: 5px;
        }

        .progress-container {
            width: 100%;
            height: 4px;
            background-color: #e9ecef;
            margin-top: 10px;
            border-radius: 2px;
            overflow: hidden;
            display: none;
        }

        .progress-bar {
            height: 100%;
            width: 0;
            background-color: #007bff;
            transition: width 0.3s ease;
        }

        /* Styles pour ROB.I.A */
        .robia-card {
            border-width: 2px;
            border-color: #17a2b8;
            transition: all 0.3s ease;
        }

        .robia-card:hover {
            box-shadow: 0 .5rem 1rem rgba(23, 162, 184, .15);
        }

        .robot-icon {
            display: inline-block;
        }

        .btn-robia {
            background: linear-gradient(45deg, #17a2b8, #20c997);
            border: none;
            color: white;
            transition: all 0.3s ease;
        }

        .btn-robia:hover {
            background: linear-gradient(45deg, #20c997, #17a2b8);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            color: white;
        }

        .btn-robia:active {
            transform: translateY(0);
        }

        .btn-robia.analyzing {
            background: linear-gradient(45deg, #dc3545, #fd7e14);
            pointer-events: none;
        }
        
        /* ROB.I.A Score Card */
        .robia-score {
            background: linear-gradient(135deg, #007bff, #6610f2);
            border-radius: 12px;
            padding: 1.5rem;
            color: white;
            box-shadow: 0 10px 20px rgba(0,123,255,0.25);
            position: relative;
            overflow: hidden;
        }

        .score-number {
            font-size: 3rem;
            font-weight: 800;
            line-height: 1;
            position: relative;
            z-index: 1;
            text-shadow: 0 2px 5px rgba(0,0,0,0.3);
        }

        .date-applied {
            border-color: #28a745 !important;
            transition: all 0.5s ease;
        }

        .robia-notification {
            border-radius: 8px;
            transition: opacity 0.5s ease;
        }

        .robia-notification.closing {
            opacity: 0;
        }

        /* Styles pour sélection de dossiers */
        .folder-list {
            list-style-type: none;
            padding: 0;
            margin-top: 15px;
            max-height: 250px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 10px;
            background-color: #ffffff;
        }

        .folder-item {
            display: flex;
            align-items: center;
            padding: 8px;
            margin-bottom: 6px;
            background-color: #f8f9fa;
            border-left: 4px solid #ffc107;
            transition: all 0.2s ease;
            box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        }

        .folder-item:hover {
            background-color: #fff8e1;
            transform: translateX(2px);
        }

        .folder-icon {
            color: #ffc107;
            margin-right: 8px;
            font-size: 1.2rem;
        }

        .folder-path {
            flex-grow: 1;
            font-family: 'Consolas', monospace;
            font-size: 0.9rem;
            color: #0d6efd;
            background-color: #f8f9fa;
            padding: 2px 6px;
            border-radius: 4px;
            border: 1px solid #dee2e6;
            word-break: break-all;
            max-width: 100%;
        }
        
        .folder-description {
            color: #6c757d;
            font-size: 0.85rem;
            font-style: italic;
            margin-left: 8px;
        }

        .remove-folder {
            opacity: 0.6;
            transition: all 0.2s ease;
            color: #dc3545;
            cursor: pointer;
            margin-left: 10px;
        }

        .remove-folder:hover {
            opacity: 1;
            transform: scale(1.2);
        }

        /* Amélioration du champ de saisie de chemin */
        #folderPathDisplay {
            font-family: 'Consolas', monospace;
            color: #004085;
            letter-spacing: 0.3px;
        }

        #folderPathDisplay:focus {
            background-color: #fff8e1;
            box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.25);
            border-color: #ffc107;
        }

        /* Amélioration de l'alerte d'information */
        .alert-info {
            background-color: #f0f7ff;
            border-color: #b8daff;
            color: #004085;
        }

        /* Style pour les exemples de chemins */
        .path-example {
            font-family: 'Consolas', monospace;
            background-color: #f8f9fa;
            padding: 2px 6px;
            border-radius: 3px;
            border: 1px solid #dee2e6;
            margin: 0 2px;
            white-space: nowrap;
        }
    </style>
}

<div class="page-container">
    <!-- En-tête moderne -->
    <div class="page-header">
        <h1 class="page-title">
            <i class="fas fa-plus-circle"></i>
            @ViewData["Title"]
        </h1>
        <p class="page-subtitle">
            <i class="fas fa-robot me-1"></i>
            Créez une nouvelle planification avec l'assistance intelligente de ROB.I.A
        </p>

        <!-- Badge créateur -->
        <div class="creator-badge">
            <i class="fas fa-user-edit"></i>
            <span>Créateur : <strong>@currentUserLogin</strong></span>
        </div>
    </div>

    <!-- Messages -->
    @if (!string.IsNullOrEmpty(Model.Flash))
    {
        <div class="alert alert-success alert-modern">
            <div class="d-flex align-items-center">
                <i class="fas fa-check-circle me-2 fs-5"></i>
                <span>@Model.Flash</span>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-modern">
            <div class="d-flex align-items-center">
                <i class="fas fa-exclamation-triangle me-2 fs-5"></i>
                <span>@Model.ErrorMessage</span>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger alert-modern">
            <div>
                <i class="fas fa-exclamation-triangle me-2 fs-5"></i>
                <strong>Erreurs détectées :</strong>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <div class="mt-1">• @error.ErrorMessage</div>
                }
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Formulaire principal -->
    <div class="form-container">
        <form method="post" class="row g-3" id="create-form" enctype="multipart/form-data">
            <input type="hidden" asp-for="Prs.Statut" id="Prs_Statut" value="@(isAdminOrValidateur ? "Validé" : "En attente")" />

            <!-- Champ caché pour le mode semaine -->
            @if (!isAdminOrValidateur)
            {
                <input type="hidden" name="weekMode" id="weekMode" value="true" />
                <input type="hidden" name="selectedWeek" id="selectedWeek" value="" />
            }

            <div class="col-md-6">
                <label asp-for="Prs.Titre" class="form-label">
                    <i class="fas fa-tag"></i>
                    Titre de la PRS
                </label>
                <input asp-for="Prs.Titre" class="form-control" placeholder="Ex: PRS Produit CMFB nouvelle version" />
                <span asp-validation-for="Prs.Titre" class="text-danger"></span>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.Equipement" class="form-label">
                    <i class="fas fa-cogs"></i>
                    Type d'équipement
                </label>
                <select asp-for="Prs.Equipement" class="form-select">
                    <option value="">-- Sélectionner un type --</option>
                    <option>🏭 CMS</option>
                    <option>✨ Finition</option>
                </select>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.ReferenceProduit" class="form-label">
                    <i class="fas fa-barcode"></i>
                    Référence produit
                </label>
                <input asp-for="Prs.ReferenceProduit" class="form-control" placeholder="Ex: RE74782258" />
            </div>

            <div class="col-md-3">
                <label asp-for="Prs.Quantite" class="form-label">
                    <i class="fas fa-hashtag"></i>
                    Quantité
                </label>
                <input asp-for="Prs.Quantite" type="number" min="1" class="form-control" placeholder="1" />
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.BesoinOperateur" class="form-label">
                    <i class="fas fa-user-hard-hat"></i>
                    Besoin opérateur
                </label>
                <select asp-for="Prs.BesoinOperateur" class="form-select">
                    <option value="">-- Sélectionner --</option>
                    <option>👨‍🔧 Besoin opérateur</option>
                    <option>❌ Aucun</option>
                </select>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.PresenceClient" class="form-label">
                    <i class="fas fa-user-tie"></i>
                    Présence client
                </label>
                <select asp-for="Prs.PresenceClient" class="form-select">
                    <option value="">-- Sélectionner --</option>
                    <option>✅ Client présent</option>
                    <option>❌ Client absent</option>
                    <option>❓ Non spécifié</option>
                </select>
            </div>

            <!-- 🤖 SECTION ROB.I.A - PLANIFICATION INTELLIGENTE -->
            <div class="col-md-12">
                <div class="card robia-card border-info">
                    <div class="card-header bg-gradient-info text-white">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-robot robot-icon me-2 fs-5"></i>
                            <div>
                                <h6 class="mb-0">🤖 ROB.I.A - Planification Intelligente</h6>
                                <small>Rapid Optimal Booking Intelligent Assistant</small>
                            </div>
                            <div class="ms-auto">
                                <div class="robia-status-indicator">
                                    <span class="badge bg-success fs-6">
                                        <i class="fas fa-circle me-1"></i>Prêt
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body bg-light">
                        <div class="row g-3">
                            @if (isAdminOrValidateur)
                            {
                                <!-- Sélection de date précise pour admin/validateur -->
                                <div class="col-md-3">
                                    <label asp-for="Prs.DateDebut" class="form-label fw-bold">
                                        <i class="fas fa-calendar-alt text-primary"></i> Date et heure de début
                                    </label>
                                    <input asp-for="Prs.DateDebut" type="datetime-local" class="form-control"
                                           value="@Model.Prs.DateDebut.ToString("yyyy-MM-ddTHH:mm")" />
                                </div>

                                <div class="col-md-3">
                                    <label asp-for="Prs.DateFin" class="form-label fw-bold">
                                        <i class="fas fa-calendar-check text-success"></i> Date et heure de fin
                                    </label>
                                    <input asp-for="Prs.DateFin" type="datetime-local" class="form-control"
                                           value="@Model.Prs.DateFin.ToString("yyyy-MM-ddTHH:mm")" />
                                </div>
                                
                                <div class="col-md-3">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-clock text-warning"></i> Durée nécessaire
                                    </label>
                                    <select id="duration-select" class="form-select">
                                        <option value="1">⏱️ 1 heure</option>
                                        <option value="2">⏱️ 2 heures</option>
                                        <option value="4">🕐 4 heures (demi-journée)</option>
                                        <option value="8" selected>🕓 8 heures (journée complète)</option>
                                        <option value="16">📅 2 jours (16h)</option>
                                        <option value="24">📅 3 jours (24h)</option>
                                        <option value="40">📅 1 semaine (40h)</option>
                                    </select>
                                </div>
                            }
                            else
                            {
                                <!-- Sélection de semaine pour utilisateurs normaux -->
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-calendar-week text-primary"></i> Sélection de la semaine
                                    </label>
                                    <div class="week-selector">
                                        <div class="week-navigation">
                                            <button type="button" class="btn btn-sm btn-outline-secondary" id="prevWeek">
                                                <i class="fas fa-chevron-left"></i> Semaine précédente
                                            </button>
                                            <div class="week-info" id="weekInfo">Semaine en cours</div>
                                            <button type="button" class="btn btn-sm btn-outline-secondary" id="nextWeek">
                                                Semaine suivante <i class="fas fa-chevron-right"></i>
                                            </button>
                                        </div>

                                        <div class="week-view">
                                            <div class="week-days" id="weekDays"></div>
                                        </div>

                                        <div class="week-selected" id="weekSelected">
                                            <p class="mb-0">Vous avez sélectionné:</p>
                                            <p class="week-highlight mb-0" id="weekHighlight">Semaine du 7 au 13 juillet 2025</p>
                                            <small class="text-muted">La PRS sera créée pour toute la semaine (lundi 00:00 au lundi suivant 00:00)</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Champs cachés pour les dates (pour compatibilité) -->
                                <input type="hidden" asp-for="Prs.DateDebut" id="hiddenDateDebut" />
                                <input type="hidden" asp-for="Prs.DateFin" id="hiddenDateFin" />
                            }

                            <div class="col-md-3 @(isAdminOrValidateur ? "d-flex align-items-end" : "")">
                                <button type="button" class="btn btn-robia w-100" id="suggest-slot-btn">
                                    🤖 ROB.I.A Analyser
                                </button>
                            </div>
                        </div>

                        <div class="mt-3 p-3 bg-info bg-opacity-10 rounded">
                            <small class="text-muted">
                                <i class="fas fa-info-circle text-info me-1"></i>
                                ROB.I.A analyse les créneaux disponibles en évitant les conflits de secteur et optimise selon l'équipement sélectionné.
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.LigneId" class="form-label">
                    <i class="fas fa-industry"></i>
                    Ligne
                </label>
                <select asp-for="Prs.LigneId" asp-items="Model.LigneList" class="form-select" id="ligne-select" required>
                    <option value="">-- Choisir une ligne --</option>
                </select>
                <span asp-validation-for="Prs.LigneId" class="text-danger"></span>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.FamilleId" class="form-label">
                    <i class="fas fa-layer-group"></i>
                    Famille de produit
                </label>
                <select asp-for="Prs.FamilleId" class="form-select">
                    <option value="">-- Aucune famille --</option>
                    @foreach (var fam in Model.Familles)
                    {
                        <option value="@fam.Id">@fam.Libelle</option>
                    }
                </select>
            </div>

            <!-- Nouveau champ pour les liens vers les dossiers PRS -->
            <div class="col-md-12">
                <div class="card border-warning">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0">
                            <i class="fas fa-folder-open me-2"></i>Liens vers dossiers PRS
                        </h5>
                    </div>
                    <div class="card-body">
                        
                        <!-- Interface de saisie de chemin simplifiée -->
                        <div class="row g-2">
                            <div class="col-md-5">
                                <label for="folderPathDisplay" class="form-label fw-bold">
                                    Chemin complet du dossier
                                </label>
                                <input type="text" class="form-control" id="folderPathDisplay" 
                                       placeholder="Ex : S:\Logistique\Appros"
                                       style="font-family: Consolas, monospace;">
                                <small class="text-muted">Copiez-collez le chemin complet du dossier</small>
                            </div>
                            <div class="col-md-5">
                                <label for="folderDescription" class="form-label">Description (optionnelle)</label>
                                <input type="text" class="form-control" id="folderDescription" 
                                       placeholder="Ex: Dossier technique, Documentation client...">
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button class="btn btn-warning w-100" type="button" id="btnAddFolder">
                                    <i class="fas fa-plus-circle"></i> Ajouter
                                </button>
                            </div>
                        </div>
                        
                        <div class="alert alert-info mt-3 mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            Copiez-collez le chemin complet du dossier depuis l'explorateur Windows (ex : <code>S:\Logistique\Appros</code>)
                        </div>
                        
                        <!-- Liste des dossiers sélectionnés -->
                        <input type="hidden" name="PrsFolderLinks" id="prsFolderLinks" value="" />
                        <ul class="folder-list mt-3" id="folderList"></ul>
                    </div>
                </div>
            </div>
                        @if (isAdminOrValidateur)
            {
                <div class="col-md-6">
                    <label asp-for="Prs.CouleurPRS" class="form-label">
                        <i class="fas fa-palette"></i>
                        Couleur PRS
                        <span class="badge bg-warning text-dark ms-2">Admin/Validateur</span>
                    </label>
                    <div class="input-group">
                        <input asp-for="Prs.CouleurPRS" type="color" class="form-control form-control-color"
                               style="width: 60px; height: 38px;"
                               value="@(string.IsNullOrEmpty(Model.Prs.CouleurPRS) ? "#007bff" : Model.Prs.CouleurPRS)" />
                        <input asp-for="Prs.CouleurPRS" type="text" class="form-control"
                               placeholder="#FF5733" pattern="^#[0-9A-Fa-f]{6}$"
                               value="@Model.Prs.CouleurPRS" />
                        <button type="button" class="btn btn-outline-secondary" id="clearColor">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <small class="form-text text-muted">
                        <i class="fas fa-info-circle"></i>
                        Choisissez une couleur personnalisée pour cette PRS (optionnel)
                    </small>
                </div>
            }

            <div class="col-md-12">
                <label asp-for="Prs.InfoDiverses" class="form-label">
                    <i class="fas fa-comment-alt"></i>
                    Informations complémentaires
                </label>
                <textarea asp-for="Prs.InfoDiverses" class="form-control" rows="3"
                          placeholder="Ajoutez toute information utile pour cette PRS..."></textarea>
            </div>
            
            <!-- Section pour l'upload de fichdiers -->
            <div class="col-md-12">
                <div class="card border-primary">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-file-upload me-2"></i>Pièces jointes
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="file-upload-container" id="dropZone">
                            <i class="fas fa-cloud-upload-alt file-upload-icon"></i>
                            <p class="file-upload-text">
                                Glissez-déposez vos fichiers ici ou <strong>cliquez pour sélectionner</strong>
                            </p>
                            <input type="file" multiple name="UploadedFiles" class="file-upload-input" id="fileUpload" />
                            <div class="progress-container" id="uploadProgress">
                                <div class="progress-bar" id="progressBar"></div>
                            </div>
                            <p class="upload-limits">
                                <i class="fas fa-info-circle"></i>
                                Taille max: 100 Mo par fichier | Tous formats acceptés
                            </p>
                        </div>
                        <ul class="file-list" id="fileList"></ul>
                    </div>
                </div>
            </div>
            <!-- 🔽 SECTION CHECKLIST À INSÉRER AVANT LES FICHIERS/DOSSIERS 🔽 -->
            <div class="col-12">
                <div class="card checklist-section border-primary shadow-lg mb-4">
                    <div class="card-header bg-primary text-white d-flex align-items-center">
                        <i class="fas fa-tasks me-2 fs-4"></i>
                        <div>
                            <h5 class="mb-0">📋 Checklist PRS</h5>
                            <small>Associez une checklist à cette PRS selon les standards qualité</small>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="checklist-type-selector mb-4 row">
                            <div class="col-md-4">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-clipboard-list me-1 text-primary"></i>Type de checklist
                                </label>
                                <select id="checklistTypeSelector" class="form-select">
                                    <option value="">-- Aucune checklist --</option>
                                    <option value="modele">🎯 Modèle prédéfini</option>
                                    <option value="copy">📋 Copier depuis PRS existante</option>
                                    <option value="custom">✏️ Personnalisée</option>
                                </select>
                            </div>
                            <div class="col-md-4" id="modeleSelector" style="display:none;">
                                <label class="form-label fw-bold"><i class="fas fa-list me-1 text-success"></i>Modèle disponible</label>
                                <select id="checklistModele" class="form-select">
                                    <option value="">-- Sélectionner un modèle --</option>
                                    @foreach (var modele in Model.ChecklistModeles)
                                    {
                                        <option value="@modele.Id">@modele.Nom (@modele.FamilleAffichage)</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4" id="prsSelector" style="display:none;">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-copy me-1 text-info"></i>PRS source
                                </label>
                                <select id="prsSourceSelect" class="form-select">
                                    <option value="">-- Chargement des PRS... --</option>
                                </select>
                                <small class="text-muted mt-1 d-block">Sélectionnez une PRS existante avec une checklist à copier</small>
                            </div>
                        </div>
                        <div id="prsSearchResults" class="prs-search-results" style="display:none;"></div>
                        <div id="checklistEditor" class="checklist-editor" style="display:none;">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0"><i class="fas fa-edit me-1"></i>Éléments de la checklist (<span id="checklistItemCount" class="badge-checklist">0</span> éléments)</h6>
                                <button type="button" class="btn btn-sm btn-checklist" id="btnAddChecklistItem">
                                    <i class="fas fa-plus-circle me-1"></i>Ajouter un élément
                                </button>
                            </div>
                            <div id="checklistItemsContainer"></div>
                        </div>
                        <input type="hidden" id="checklistData" name="ChecklistData" />
                    </div>
                </div>
            </div>
            <div class="col-12 text-center">
                <button type="submit" class="btn btn-primary btn-lg px-5">
                    <i class="fas fa-plus-circle me-2"></i>Créer la PRS
                </button>
            </div>
        </form>
    </div>

    <!-- 🤖 ZONE ROB.I.A - SUGGESTIONS INTELLIGENTES -->
    <div id="robia-suggestions" class="mt-4" style="display: none;">
        <div class="card border-success shadow-lg">
            <div class="card-header bg-gradient-success text-dark">
                <div class="d-flex align-items-center">
                    <i class="fas fa-robot robot-icon me-2 fs-4"></i>
                    <div>
                        <h5 class="mb-0">🎯 ROB.I.A - Suggestions Optimales</h5>
                        <small>Rapid Optimal Booking Intelligent Assistant • v1.0</small>
                    </div>
                    <div class="ms-auto">
                        <span class="badge bg-light text-dark">IA Active</span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div id="suggestions-content"></div>
                <div class="mt-4 text-center">
                    <button type="button" class="btn btn-success btn-lg me-3" id="apply-suggestion">
                        <i class="fas fa-check-circle me-2"></i>Appliquer cette suggestion
                    </button>
                    <button type="button" class="btn btn-warning me-3" id="show-alternatives">
                        <i class="fas fa-sync-alt me-2"></i>Voir alternative suivante
                    </button>
                    <button type="button" class="btn btn-secondary" id="close-suggestions">
                        <i class="fas fa-times me-2"></i>Fermer
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


<template id="checklistItemTemplate">
    <div class="checklist-item mb-2" data-index="">
        <div class="row g-2 align-items-center">
            <div class="col-md-2">
                <select class="form-control form-control-sm checklist-categorie" data-field="categorie">
                    <option value="">Catégorie</option>
                    <option value="Produit">Produit</option>
                    <option value="Documentation">Documentation</option>
                    <option value="Process">Process</option>
                    <option value="Matière">Matière</option>
                    <option value="Production">Production</option>
                </select>
            </div>
            <div class="col-md-2">
                <input type="text" class="form-control form-control-sm checklist-souscategorie" placeholder="Sous-catégorie" data-field="sousCategorie">
            </div>
            <div class="col-md-5">
                <input type="text" class="form-control form-control-sm checklist-libelle" placeholder="Description de l'élément" data-field="libelle">
            </div>
            <div class="col-md-2">
                <div class="form-check">
                    <input class="form-check-input checklist-obligatoire" type="checkbox" data-field="obligatoire">
                    <label class="form-check-label small">Obligatoire</label>
                </div>
            </div>
            <div class="col-md-1">
                <button type="button" class="btn btn-sm btn-danger btn-remove-item"><i class="fas fa-trash"></i></button>
            </div>
        </div>
    </div>
</template>
<!-- ✅ FIN ABSOLUE du page-container ICI -->
<!-- ✅ TITRE STYLÉ DU CALENDRIER -->
<div class="calendar-section-title">
    <h4 class="calendar-standalone-title">
        <i class="fas fa-calendar-alt"></i>
        Visualisation du planning (créneaux existants)
    </h4>
</div>

<!-- ✅ CALENDRIER SANS ARRIÈRE-PLAN -->
@Html.Partial("_CalendarBlock")

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/checklist-manager.js" asp-append-version="true"></script>

    <script>
        // Variables globales
        const dateDebutInput = document.querySelector("#Prs_DateDebut");
        const dateFinInput = document.querySelector("#Prs_DateFin");
        const durationSelect = document.querySelector("#duration-select");
        const ligneSelect = document.querySelector("#ligne-select");
        const equipementSelect = document.querySelector("#Prs_Equipement");
        let currentSuggestions = [];
        let selectedSuggestionIndex = 0;
        
        // Déterminer si l'utilisateur est admin ou validateur
        const isAdminOrValidateur = @Json.Serialize(isAdminOrValidateur);

        // Sélecteurs spécifiques selon le mode admin ou utilisateur
        const hiddenDateDebutInput = document.querySelector("#hiddenDateDebut");
        const hiddenDateFinInput = document.querySelector("#hiddenDateFin");
        const weekInfoElem = document.querySelector("#weekInfo");
        const weekDaysElem = document.querySelector("#weekDays");
        const weekHighlightElem = document.querySelector("#weekHighlight");
        const selectedWeekInput = document.querySelector("#selectedWeek");

        // Initialisation avec la date actuelle (10 juillet 2025 07:50:28 UTC)
        const now = new Date('2025-07-10T07:50:28Z');
        const tomorrow = new Date(now);
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(9, 0, 0, 0);

        // Variable pour la semaine sélectionnée (pour utilisateurs normaux)
        let currentWeekStart = getMonday(new Date(now));

        // Variables pour la gestion des dossiers
        let selectedFolders = [];
        const prsFolderLinksInput = document.getElementById("prsFolderLinks");
        const folderPathDisplay = document.getElementById("folderPathDisplay");
        const folderList = document.getElementById("folderList");
        const btnAddFolder = document.getElementById("btnAddFolder");
        const folderDescription = document.getElementById("folderDescription");
        
        // Nom de l'utilisateur actuel pour les liens de dossiers
        const currentUserLogin = "@currentUserLogin";

        function getTimezoneInfo() {
            return {
                isDST: true,
                offset: 2,
                name: 'Europe/Paris'
            };
        }

        function convertUTCToLocalForInput(utcDateString) {
            const utcDate = new Date(utcDateString + (utcDateString.includes('Z') ? '' : 'Z'));
            const localDate = new Date(utcDate.toLocaleString('sv-SE', { timeZone: 'Europe/Paris' }));
            return localDate;
        }

        function formatDateTimeLocal(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        // Initialisation des dates par défaut
        if (dateDebutInput && !dateDebutInput.value) {
            dateDebutInput.value = formatDateTimeLocal(tomorrow);
        }

        @if (!isAdminOrValidateur)
        {
            <text>
                // Initialisation de la sélection de semaine pour les utilisateurs normaux
                initWeekSelector();

                // Mise à jour initiale des champs cachés pour semaine
                updateHiddenDateFields();
            </text>
        }

        @if (isAdminOrValidateur)
        {
            <text>
                // Gestion du sélecteur de couleur
                const colorPicker = document.querySelector('input[type="color"]');
                const colorText = document.querySelector('input[type="text"][name="Prs.CouleurPRS"]');
                const clearButton = document.getElementById('clearColor');

                if (colorPicker && colorText) {
                    colorPicker.addEventListener('change', function() {
                        colorText.value = this.value;
                    });

                    colorText.addEventListener('input', function() {
                        if (this.value.match(/^#[0-9A-Fa-f]{6}$/)) {
                            colorPicker.value = this.value;
                        }
                    });

                    if (clearButton) {
                        clearButton.addEventListener('click', function() {
                            colorPicker.value = '#007bff';
                            colorText.value = '';
                        });
                    }
                }
                
                // Synchronisation durée ↔ dates
                if (durationSelect) {
                    durationSelect.addEventListener("change", function() {
                        if (dateDebutInput.value) {
                            updateEndDateFromDuration();
                        }
                    });

                    dateDebutInput.addEventListener("change", function() {
                        updateEndDateFromDuration();
                        validateDates();
                    });

                    dateFinInput.addEventListener("change", function() {
                        updateDurationFromDates();
                        validateDates();
                    });
                    
                    // Initialisation
                    updateDurationFromDates();
                }
            </text>
        }

        // Fonction pour obtenir le lundi d'une semaine donnée
        function getMonday(date) {
            const d = new Date(date);
            const day = d.getDay();
            const diff = d.getDate() - day + (day === 0 ? -6 : 1);
            return new Date(d.setDate(diff));
        }

        // Formater la date en texte français
        function formatDateFr(date) {
            const options = { day: 'numeric', month: 'long', year: 'numeric' };
            return date.toLocaleDateString('fr-FR', options);
        }

        // Formatage du nom du jour en français
        function getDayName(date) {
            return date.toLocaleDateString('fr-FR', { weekday: 'short' });
        }

        // Initialisation du sélecteur de semaine
        function initWeekSelector() {
            // Mettre à jour l'affichage de la semaine actuelle
            updateWeekDisplay();

            // Ajouter des écouteurs d'événements pour la navigation
            document.getElementById('prevWeek').addEventListener('click', () => {
                currentWeekStart.setDate(currentWeekStart.getDate() - 7);
                updateWeekDisplay();
            });

            document.getElementById('nextWeek').addEventListener('click', () => {
                currentWeekStart.setDate(currentWeekStart.getDate() + 7);
                updateWeekDisplay();
            });
        }

        // Mettre à jour l'affichage de la semaine
        function updateWeekDisplay() {
            // Mettre à jour l'info de la semaine
            const weekEnd = new Date(currentWeekStart);
            weekEnd.setDate(weekEnd.getDate() + 6); // Dimanche

            weekInfoElem.textContent = `Semaine ${getWeekNumber(currentWeekStart)} - ${currentWeekStart.getFullYear()}`;
            weekHighlightElem.textContent = `Semaine du ${formatDateFr(currentWeekStart)} au ${formatDateFr(weekEnd)}`;

            // Mettre à jour le champ caché avec la date du lundi
            selectedWeekInput.value = currentWeekStart.toISOString();

            // Générer l'affichage des jours de la semaine
            weekDaysElem.innerHTML = '';

            for (let i = 0; i < 7; i++) {
                const day = new Date(currentWeekStart);
                day.setDate(day.getDate() + i);

                // Créer l'élément jour
                const dayElement = document.createElement('div');
                dayElement.className = 'week-day';

                const dayName = getDayName(day);
                const dayNumber = day.getDate();

                dayElement.innerHTML = `
                    <div class="day-name">${dayName}</div>
                    <div class="day-number">${dayNumber}</div>
                `;

                weekDaysElem.appendChild(dayElement);
            }

            // Mise à jour des champs cachés
            updateHiddenDateFields();
        }

        // Obtenir le numéro de semaine d'une date
        function getWeekNumber(date) {
            const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
            const dayNum = d.getUTCDay() || 7;
            d.setUTCDate(d.getUTCDate() + 4 - dayNum);
            const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
            return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
        }

        // Mettre à jour les champs cachés pour la semaine entière
        function updateHiddenDateFields() {
            if (!currentWeekStart) return;

            // La période va du lundi 00:00:00 au lundi suivant 00:00:00
            const mondayStart = new Date(currentWeekStart);
            mondayStart.setHours(0, 0, 0, 0);

            const nextMonday = new Date(mondayStart);
            nextMonday.setDate(nextMonday.getDate() + 7); // Lundi suivant à 00:00:00

            // Mettre à jour les champs cachés (format ISO)
            hiddenDateDebutInput.value = mondayStart.toISOString().slice(0, 16);
            hiddenDateFinInput.value = nextMonday.toISOString().slice(0, 16);
        }

        function updateEndDateFromDuration() {
            const startDate = new Date(dateDebutInput.value);
            const durationHours = parseInt(durationSelect.value);

            if (durationHours <= 8) {
                const endDate = new Date(startDate.getTime() + (durationHours * 60 * 60 * 1000));
                dateFinInput.value = formatDateTimeLocal(endDate);
            } else {
                const days = Math.floor(durationHours / 8);
                const remainingHours = durationHours % 8;

                let endDate = new Date(startDate);
                let addedDays = 0;

                while (addedDays < days) {
                    endDate.setDate(endDate.getDate() + 1);
                    // Skip weekends in multi-day calculations
                    if (endDate.getDay() !== 0 && endDate.getDay() !== 6) {
                        addedDays++;
                    }
                }

                if (remainingHours > 0) {
                    endDate.setHours(startDate.getHours() + remainingHours);
                } else {
                    endDate.setHours(17, 0, 0, 0);
                }

                dateFinInput.value = formatDateTimeLocal(endDate);
            }
        }

        function updateDurationFromDates() {
            if (dateDebutInput && dateFinInput && dateDebutInput.value && dateFinInput.value) {
                const start = new Date(dateDebutInput.value);
                const end = new Date(dateFinInput.value);
                const diffHours = Math.round((end - start) / (1000 * 60 * 60));

                const options = Array.from(durationSelect.options);
                const closest = options.reduce((prev, curr) => {
                    return Math.abs(parseInt(curr.value) - diffHours) < Math.abs(parseInt(prev.value) - diffHours) ? curr : prev;
                });

                durationSelect.value = closest.value;
            }
        }

        function validateDates() {
            const dateDebut = new Date(dateDebutInput.value);
            const dateFin = new Date(dateFinInput.value);

            if (dateFin <= dateDebut) {
                dateFinInput.style.borderColor = '#dc3545';
                dateFinInput.style.boxShadow = '0 0 0 0.2rem rgba(220, 53, 69, 0.25)';
                return false;
            } else {
                dateFinInput.style.borderColor = '';
                dateFinInput.style.boxShadow = '';
                return true;
            }
        }

        // Gestion des dossiers liés à la PRS
        document.addEventListener('DOMContentLoaded', function() {
            // Gestion du bouton "Ajouter"
            if (btnAddFolder) {
                btnAddFolder.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    if (folderPathDisplay.value.trim()) {
                        addFolder(folderPathDisplay.value.trim(), folderDescription.value);
                        folderPathDisplay.value = '';
                        folderDescription.value = '';
                        folderPathDisplay.focus();
                    } else {
                        showRobiaNotification('Veuillez d\'abord entrer un chemin de dossier', 'warning');
                    }
                });
            }

            // Fonction pour ajouter un dossier
            function addFolder(path, description) {
                // Normaliser les slashes pour un format Windows consistant
                const normalizedPath = path.replace(/\//g, '\\');
                
                // Vérifier si ce dossier existe déjà dans la liste
                if (selectedFolders.some(f => f.Chemin === normalizedPath)) {
                    showRobiaNotification('Ce dossier est déjà ajouté à la liste', 'info');
                    return;
                }
                
                // Utiliser les noms de propriétés qui correspondent au modèle C#
                selectedFolders.push({
                    Chemin: normalizedPath,
                    Description: description || ''
                });
                
                updateFolderList();
                showRobiaNotification('Dossier ajouté avec succès', 'success');
            }

            // Fonction pour mettre à jour la liste des dossiers dans l'UI
            function updateFolderList() {
                folderList.innerHTML = '';
                
                if (selectedFolders.length === 0) {
                    const emptyMessage = document.createElement('li');
                    emptyMessage.className = 'text-muted';
                    emptyMessage.innerHTML = '<i class="fas fa-info-circle me-2"></i>Aucun dossier ajouté pour le moment.';
                    folderList.appendChild(emptyMessage);
                    
                    // Mettre à jour le champ caché avec un tableau vide
                    if (prsFolderLinksInput) {
                        prsFolderLinksInput.value = JSON.stringify([]);
                    }
                    return;
                }
                
                selectedFolders.forEach((folder, index) => {
                    const folderItem = document.createElement('li');
                    folderItem.className = 'folder-item';
                    
                    const folderIcon = document.createElement('i');
                    folderIcon.className = 'folder-icon fas fa-folder';
                    
                    const folderPath = document.createElement('span');
                    folderPath.className = 'folder-path';
                    folderPath.textContent = folder.Chemin;
                    folderPath.title = folder.Chemin;
                    
                    const folderDesc = document.createElement('span');
                    if (folder.Description) {
                        folderDesc.className = 'folder-description';
                        folderDesc.textContent = `(${folder.Description})`;
                    }
                    
                    const removeButton = document.createElement('i');
                    removeButton.className = 'remove-folder fas fa-times-circle';
                    removeButton.setAttribute('title', 'Supprimer');
                    removeButton.addEventListener('click', function() {
                        selectedFolders.splice(index, 1);
                        updateFolderList();
                        showRobiaNotification('Dossier supprimé', 'info');
                    });
                    
                    folderItem.appendChild(folderIcon);
                    folderItem.appendChild(folderPath);
                    if (folder.Description) {
                        folderItem.appendChild(folderDesc);
                    }
                    folderItem.appendChild(removeButton);
                    
                    folderList.appendChild(folderItem);
                });
                
                // Mettre à jour le champ caché avec le JSON
                if (prsFolderLinksInput) {
                    prsFolderLinksInput.value = JSON.stringify(selectedFolders);
                }
            }

            // Lors de la soumission du formulaire
            document.querySelector('#create-form').addEventListener('submit', function(e) {
                // S'assurer que les liens de dossiers sont correctement envoyés
                if (selectedFolders.length > 0) {
                    if (prsFolderLinksInput) {
                        prsFolderLinksInput.value = JSON.stringify(selectedFolders);
                    } else {
                        const hiddenInput = document.createElement('input');
                        hiddenInput.type = 'hidden';
                        hiddenInput.name = 'PrsFolderLinks';
                        hiddenInput.value = JSON.stringify(selectedFolders);
                        this.appendChild(hiddenInput);
                    }
                } else {
                    if (prsFolderLinksInput) {
                        prsFolderLinksInput.value = JSON.stringify([]);
                    }
                }
            });
            
            // Initialiser la liste des dossiers
            updateFolderList();
        });

        // ROB.I.A - Logique principale
        document.getElementById('suggest-slot-btn').addEventListener('click', async function() {
            const btn = this;
            const ligneId = ligneSelect.value;
            const durationHours = durationSelect ? parseInt(durationSelect.value) : 8;
            const equipement = equipementSelect.value || '';
            const timezoneInfo = getTimezoneInfo();

            if (!ligneId) {
                showRobiaNotification('Veuillez d\'abord sélectionner une ligne pour une analyse optimale.', 'warning');
                ligneSelect.focus();
                ligneSelect.style.borderColor = '#ffc107';
                setTimeout(() => ligneSelect.style.borderColor = '', 3000);
                return;
            }

            btn.disabled = true;
            btn.classList.add('analyzing');
            btn.innerHTML = '<i class="fas fa-cog fa-spin me-2"></i>ROB.I.A analyse...';
            updateRobiaStatus('Analyse en cours...', 'warning');

            try {
                const response = await fetch('/api/ai-suggestions/suggest-slot', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Timezone': timezoneInfo.name
                    },
                    body: JSON.stringify({
                        ligneId: parseInt(ligneId),
                        equipement: equipement,
                        durationHours: durationHours
                    })
                });

                const result = await response.json();

                if (result.success) {
                    currentSuggestions = result.suggestions || [];
                    selectedSuggestionIndex = 0;
                    
                    if (currentSuggestions.length > 0) {
                        showRobiaSuggestions(currentSuggestions);
                        showRobiaNotification(`${currentSuggestions.length} suggestion(s) optimale(s) trouvée(s) !`, 'success');
                        updateRobiaStatus(`${currentSuggestions.length} suggestions trouvées`, 'success');
                    } else {
                        showRobiaNotification('Aucun créneau optimal trouvé avec ces critères.', 'info');
                        updateRobiaStatus('Aucune suggestion trouvée', 'info');
                    }
                } else {
                    showRobiaNotification('Erreur lors de l\'analyse : ' + result.message, 'danger');
                    updateRobiaStatus('Erreur d\'analyse', 'danger');
                }
            } catch (error) {
                showRobiaNotification('Erreur de communication avec ROB.I.A', 'danger');
                updateRobiaStatus('Erreur de communication', 'danger');
                
                // En mode démo, simulons une réponse
                simulateDemoResponse(ligneId, durationHours, equipement);
            } finally {
                btn.disabled = false;
                btn.classList.remove('analyzing');
                btn.innerHTML = '🤖 ROB.I.A Analyser';
                setTimeout(() => updateRobiaStatus('Prêt', 'success'), 3000);
            }
        });
        
        // Fonction de démonstration pour simuler la réponse de l'API
        function simulateDemoResponse(ligneId, durationHours, equipement) {
            // Créer des suggestions fictives
            const now = new Date();
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            tomorrow.setHours(9, 0, 0, 0);
            
            const suggestions = [];
            
            // Suggestion 1: demain
            const suggestion1End = new Date(tomorrow);
            suggestion1End.setHours(tomorrow.getHours() + durationHours);
            
            suggestions.push({
                dateDebut: tomorrow.toISOString(),
                dateFin: suggestion1End.toISOString(),
                score: 245,
                raison: "🚀 Mardi excellent pour la production, ✅ Secteur production libre cette semaine, 🌅 Créneau matinal premium (9h-11h), 📅 Journée totalement libre sur cette ligne"
            });
            
            // Suggestion 2: jour suivant
            const day2 = new Date(tomorrow);
            day2.setDate(day2.getDate() + 1);
            day2.setHours(13, 0, 0, 0);
            
            const day2End = new Date(day2);
            day2End.setHours(day2.getHours() + durationHours);
            
            suggestions.push({
                dateDebut: day2.toISOString(),
                dateFin: day2End.toISOString(),
                score: 175,
                raison: "📊 Mercredi idéal pour le milieu de semaine, 🌤️ Créneau après-midi optimal, ✨ Idéal pour finition après-midi (13h-15h), 📊 Journée peu chargée (1 PRS)"
            });
            
            // Suggestion 3: 2 jours plus tard
            const day3 = new Date(tomorrow);
            day3.setDate(day3.getDate() + 2);
            day3.setHours(9, 0, 0, 0);
            
            const day3End = new Date(day3);
            day3End.setHours(day3.getHours() + durationHours);
            
            suggestions.push({
                dateDebut: day3.toISOString(),
                dateFin: day3End.toISOString(),
                score: 130,
                raison: "🔍 Jeudi stratégique pour les finitions, 🔍 Attention: charge modérée ce jour-là, 🌅 Créneau matinal disponible, 📈 Bonne productivité attendue"
            });
            
            // Suggestion 4: semaine prochaine
            const day4 = new Date(tomorrow);
            day4.setDate(day4.getDate() + 7);
            day4.setHours(9, 0, 0, 0);
            
            const day4End = new Date(day4);
            day4End.setHours(day4.getHours() + durationHours);
            
            suggestions.push({
                dateDebut: day4.toISOString(),
                dateFin: day4End.toISOString(),
                score: 185,
                raison: "🚀 Lundi parfait pour la production, 🎉 Début de semaine idéal, 📊 Semaine peu chargée, 🚀 Démarrage idéal pour projet hebdomadaire"
            });
            
            // Suggestion 5: 2 semaines plus tard
            const day5 = new Date(tomorrow);
            day5.setDate(day5.getDate() + 14);
            day5.setHours(10, 0, 0, 0);
            
            const day5End = new Date(day5);
            day5End.setHours(day5.getHours() + durationHours);
            
            suggestions.push({
                dateDebut: day5.toISOString(),
                dateFin: day5End.toISOString(),
                score: 160,
                raison: "🚀 Lundi parfait pour la production, 📈 Semaine 30 - Charge faible, 🌅 Créneau matinal décalé (10h), 📅 Toutes ressources disponibles"
            });
            
            currentSuggestions = suggestions;
            selectedSuggestionIndex = 0;
            
            if (suggestions.length > 0) {
                showRobiaSuggestions(suggestions);
                showRobiaNotification(`${suggestions.length} suggestion(s) optimale(s) trouvée(s) !`, 'success');
                updateRobiaStatus(`${suggestions.length} suggestions trouvées`, 'success');
            }
        }

        function showRobiaSuggestions(suggestions) {
            const suggestionsDiv = document.getElementById('robia-suggestions');
            const contentDiv = document.getElementById('suggestions-content');

            if (suggestions && suggestions.length > 0) {
                const suggestion = suggestions[selectedSuggestionIndex];
                const durationText = getDurationText(parseInt(durationSelect ? durationSelect.value : 8));

                contentDiv.innerHTML = `
                    <div class="suggestion-main border rounded-3 p-4 bg-gradient-light">
                        <div class="row align-items-center">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <h6 class="text-success mb-2">
                                        <i class="fas fa-calendar-alt text-primary"></i>
                                        Créneau Optimal Détecté (${durationText})
                                    </h6>
                                    <div class="fs-5 text-primary mb-3 fw-bold">
                                        <div class="mb-2">
                                            <i class="fas fa-play-circle text-success"></i>
                                            <strong>Début :</strong> ${formatDateTimeFr(suggestion.dateDebut)}
                                        </div>
                                        <div>
                                                                                        <i class="fas fa-stop-circle text-danger"></i>
                                            <strong>Fin :</strong> ${formatDateTimeFr(suggestion.dateFin)}
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3 p-3 bg-info bg-opacity-10 rounded">
                                    <h6 class="text-info mb-2">
                                        <i class="fas fa-lightbulb"></i> Analyse ROB.I.A
                                    </h6>
                                    <p class="mb-0 text-muted">${suggestion.raison}</p>
                                </div>

                                ${suggestions.length > 1 ?
                                    `<div class="mt-2">
                                        <span class="badge bg-primary">
                                            <i class="fas fa-list-ol"></i>
                                            Suggestion ${selectedSuggestionIndex + 1} sur ${suggestions.length}
                                        </span>
                                    </div>` : ''
                                }
                            </div>

                            <div class="col-md-4 text-center">
                                <div class="robia-score">
                                    <div class="mb-2">
                                        <i class="fas fa-trophy text-white"></i>
                                        <strong>Score ROB.I.A</strong>
                                    </div>
                                    <div class="score-number">${suggestion.score}</div>
                                    <small class="opacity-75">/ 200 points</small>
                                    <div class="mt-2">
                                        <div class="progress" style="height: 8px;">
                                            <div class="progress-bar bg-white" style="width: ${Math.min((suggestion.score / 200) * 100, 100)}%"></div>
                                        </div>
                                    </div>
                                    ${suggestion.score > 200 ?
                                        `<div class="mt-2">
                                            <span class="badge bg-warning text-dark">Score exceptionnel!</span>
                                        </div>` : ''
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                suggestionsDiv.style.display = 'block';
                suggestionsDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
            } else {
                contentDiv.innerHTML = `
                    <div class="alert alert-warning border-0 shadow-sm">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-exclamation-triangle fa-2x text-warning me-3"></i>
                            <div>
                                <h6 class="alert-heading mb-2">ROB.I.A n'a pas trouvé de créneau optimal</h6>
                                <p class="mb-0">
                                    <strong>Suggestions d'optimisation :</strong><br>
                                    • Essayez une durée plus courte<br>
                                    • Sélectionnez une autre ligne<br>
                                    • Vérifiez que la période n'est pas surchargée<br>
                                    • Consultez le planning existant ci-dessous
                                </p>
                            </div>
                        </div>
                    </div>
                `;
                suggestionsDiv.style.display = 'block';
            }
        }

        function getDurationText(hours) {
            const durations = {
                1: "1 heure",
                2: "2 heures",
                4: "4 heures (demi-journée)",
                8: "8 heures (journée complète)",
                16: "2 jours (16h)",
                24: "3 jours (24h)",
                40: "1 semaine (40h)"
            };
            return durations[hours] || `${hours} heures`;
        }

        function formatDateTimeFr(dateStr) {
            const utcDate = new Date(dateStr + (dateStr.includes('Z') ? '' : 'Z'));
            const localDate = new Date(utcDate.toLocaleString('sv-SE', { timeZone: 'Europe/Paris' }));

            const options = {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                timeZone: 'Europe/Paris'
            };
            return localDate.toLocaleDateString('fr-FR', options);
        }

        function updateRobiaStatus(message, type) {
            const statusIndicator = document.querySelector('.robia-status-indicator');
            if (!statusIndicator) return;

            const colors = {
                success: 'bg-success',
                warning: 'bg-warning',
                danger: 'bg-danger',
                info: 'bg-info'
            };

            statusIndicator.innerHTML = `
                <span class="badge ${colors[type]} fs-6">
                    <i class="fas fa-circle me-1"></i>${message}
                </span>
            `;
        }

        // Actions sur les suggestions
        document.getElementById('apply-suggestion').addEventListener('click', function() {
            if (currentSuggestions.length > 0) {
                const suggestion = currentSuggestions[selectedSuggestionIndex];

                if (isAdminOrValidateur) {
                    // Mode admin : mettre à jour les champs de date directement
                    const localStart = convertUTCToLocalForInput(suggestion.dateDebut);
                    const localEnd = convertUTCToLocalForInput(suggestion.dateFin);

                    dateDebutInput.value = formatDateTimeLocal(localStart);
                    dateFinInput.value = formatDateTimeLocal(localEnd);

                    // Animation des champs modifiés
                    [dateDebutInput, dateFinInput].forEach(input => {
                        input.classList.add('date-applied');
                        input.style.transform = 'scale(1.05)';
                        setTimeout(() => {
                            input.classList.remove('date-applied');
                            input.style.transform = '';
                        }, 2000);
                    });

                    if (durationSelect) updateDurationFromDates();
                } else {
                    // Mode utilisateur : mettre à jour la semaine sélectionnée
                    const suggestionWeekStart = getMonday(new Date(suggestion.dateDebut));
                    currentWeekStart = new Date(suggestionWeekStart);
                    updateWeekDisplay();
                }

                document.getElementById('robia-suggestions').style.display = 'none';
                showRobiaNotification('Suggestion appliquée avec succès !', 'success');
                updateRobiaStatus('Prêt', 'success');
            }
        });

        document.getElementById('close-suggestions').addEventListener('click', function() {
            document.getElementById('robia-suggestions').style.display = 'none';
            updateRobiaStatus('Prêt', 'success');
        });

        document.getElementById('show-alternatives').addEventListener('click', function() {
            if (currentSuggestions.length > 1) {
                selectedSuggestionIndex = (selectedSuggestionIndex + 1) % currentSuggestions.length;
                showRobiaSuggestions(currentSuggestions);
            } else {
                showRobiaNotification("Désolé, pas d'alternatives disponibles pour le moment.", 'info');
            }
        });

        function showRobiaNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} robia-notification border-0 shadow-lg`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                width: 380px;
                max-width: 90vw;
                border-radius: 8px;
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            `;

            const icons = {
                success: 'fas fa-check-circle',
                warning: 'fas fa-exclamation-triangle',
                danger: 'fas fa-times-circle',
                info: 'fas fa-info-circle'
            };

            notification.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="fas fa-robot robot-icon me-2 fs-5"></i>
                    <div class="flex-grow-1">
                        <strong>ROB.I.A:</strong> ${message}
                    </div>
                    <i class="${icons[type]} ms-2"></i>
                    <button type="button" class="btn-close ms-2" onclick="this.parentElement.parentElement.remove()"></button>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.classList.add('closing');
                notification.style.opacity = '0';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                }, 500);
            }, 5000);
        }

        // Gestion de l'upload des fichiers
        document.addEventListener('DOMContentLoaded', function() {
            const dropZone = document.getElementById('dropZone');
            const fileInput = document.getElementById('fileUpload');
            const fileList = document.getElementById('fileList');
            const progressContainer = document.getElementById('uploadProgress');
            const progressBar = document.getElementById('progressBar');

            // Stocker les fichiers sélectionnés
            let selectedFiles = [];

            // Fonction pour formater la taille du fichier
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            // Fonction pour déterminer l'icône en fonction du type de fichier
            function getFileIcon(fileName) {
                const extension = fileName.split('.').pop().toLowerCase();

                const icons = {
                    'pdf': 'fas fa-file-pdf',
                    'doc': 'fas fa-file-word',
                    'docx': 'fas fa-file-word',
                    'xls': 'fas fa-file-excel',
                    'xlsx': 'fas fa-file-excel',
                    'ppt': 'fas fa-file-powerpoint',
                    'pptx': 'fas fa-file-powerpoint',
                    'txt': 'fas fa-file-alt',
                    'csv': 'fas fa-file-csv',
                    'jpg': 'fas fa-file-image',
                    'jpeg': 'fas fa-file-image',
                    'png': 'fas fa-file-image',
                    'gif': 'fas fa-file-image',
                    'zip': 'fas fa-file-archive',
                    'rar': 'fas fa-file-archive',
                    '7z': 'fas fa-file-archive'
                };

                return icons[extension] || 'fas fa-file';
            }

            // Fonction pour mettre à jour la liste de fichiers dans l'UI
            function updateFileListUI() {
                fileList.innerHTML = '';

                selectedFiles.forEach((file, index) => {
                    const fileItem = document.createElement('li');
                    fileItem.className = 'file-item';

                    const fileIcon = document.createElement('i');
                    fileIcon.className = `file-icon ${getFileIcon(file.name)}`;

                    const fileName = document.createElement('span');
                    fileName.className = 'file-name';
                    fileName.textContent = file.name;

                    const fileSize = document.createElement('span');
                    fileSize.className = 'file-size';
                    fileSize.textContent = formatFileSize(file.size);

                    const removeButton = document.createElement('i');
                    removeButton.className = 'remove-file fas fa-times-circle';
                    removeButton.setAttribute('title', 'Supprimer');
                    removeButton.addEventListener('click', function() {
                        selectedFiles.splice(index, 1);
                        updateFileListUI();
                    });

                    fileItem.appendChild(fileIcon);
                    fileItem.appendChild(fileName);
                    fileItem.appendChild(fileSize);
                    fileItem.appendChild(removeButton);

                    fileList.appendChild(fileItem);
                });
            }

            // Fonction pour ajouter des fichiers à notre collection
            function addFiles(files) {
                if (!files || !files.length) return;

                // Pour chaque fichier sélectionné
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];

                    // Vérifier la taille maximale
                    if (file.size > 100 * 1024 * 1024) {
                        showRobiaNotification(`Le fichier ${file.name} est trop volumineux (maximum 100 Mo)`, 'warning');
                        continue;
                    }

                    // Vérifier si un fichier avec le même nom existe déjà
                    const existingIndex = selectedFiles.findIndex(f => f.name === file.name);
                    if (existingIndex >= 0) {
                        // Remplacer le fichier existant
                        selectedFiles[existingIndex] = file;
                    } else {
                        // Ajouter le nouveau fichier
                        selectedFiles.push(file);
                    }
                }

                // Mettre à jour l'interface utilisateur
                updateFileListUI();

                // Afficher la progression
                progressContainer.style.display = 'block';
                progressBar.style.width = '0%';

                let progress = 0;
                const interval = setInterval(() => {
                    progress += 5;
                    progressBar.style.width = `${Math.min(progress, 100)}%`;

                    if (progress >= 100) {
                        clearInterval(interval);
                        setTimeout(() => {
                            progressContainer.style.display = 'none';
                        }, 500);
                    }
                }, 50);
            }

            // Événement lors de la sélection de fichiers par le input file
            if (fileInput) {
                fileInput.addEventListener('change', function(e) {
                    addFiles(this.files);
                });
            }

            // Événements pour le drag & drop
            if (dropZone) {
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    dropZone.addEventListener(eventName, (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                    });
                });

                dropZone.addEventListener('dragenter', () => {
                    dropZone.classList.add('dragover');
                });

                dropZone.addEventListener('dragover', () => {
                    dropZone.classList.add('dragover');
                });

                dropZone.addEventListener('dragleave', () => {
                    dropZone.classList.remove('dragover');
                });

                dropZone.addEventListener('drop', (e) => {
                    dropZone.classList.remove('dragover');

                    // Ajouter les fichiers déposés
                    addFiles(e.dataTransfer.files);
                });
            }

            // Lors de la soumission du formulaire, nous devons copier les fichiers sélectionnés dans l'input file
            document.querySelector('#create-form').addEventListener('submit', function(e) {
                if (selectedFiles.length > 0) {
                    try {
                        // Créer un nouveau DataTransfer object
                        const dataTransfer = new DataTransfer();

                        // Ajouter chaque fichier sélectionné
                        selectedFiles.forEach(file => {
                            dataTransfer.items.add(file);
                        });

                        // Assigner les fichiers à l'input file
                        fileInput.files = dataTransfer.files;
                    } catch (error) {
                        console.error("Erreur lors de la préparation des fichiers pour l'envoi", error);
                        // Ne pas bloquer la soumission du formulaire si cette étape échoue
                    }
                }
            });
        });

        // Validation du formulaire
        document.querySelector("#create-form").addEventListener("submit", function(e) {
            if (isAdminOrValidateur && !validateDates()) {
                e.preventDefault();
                showRobiaNotification('La date de début doit être antérieure à la date de fin.', 'danger');
                return false;
            }

            // Vérification que la ligne est sélectionnée
            if (!ligneSelect.value) {
                e.preventDefault();
                showRobiaNotification('Veuillez sélectionner une ligne.', 'danger');
                ligneSelect.focus();
                return false;
            }
        });

        // Initialisation
        setTimeout(() => {
            showRobiaNotification(`ROB.I.A prêt à optimiser vos planifications, ${currentUserLogin}!`, 'success');
        }, 1000);
    </script>
}